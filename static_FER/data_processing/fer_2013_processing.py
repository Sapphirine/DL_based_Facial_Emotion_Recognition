# -*- coding: utf-8 -*-
"""Fer_2013_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZAON6fMqTc_Sbw0VPYW7ix2dI8V3cbVq
"""

from google.colab import drive
import pickle
drive.mount('/gdrive', force_remount=True)

import sys
import time 
import os
import cv2
import datetime
from PIL import Image
from matplotlib import pyplot as plt

import pandas as pd
import numpy as np
# % matplotlib inline

"""# Reading data"""

data = pd.read_csv('/gdrive/My Drive/big_data_milestone2/data/fer2013.csv')

data['Usage'].unique()

data_train = data.loc[data['Usage']=='Training']
public_test = data.loc[data['Usage']=='PublicTest']
private_test = data.loc[data['Usage']=='PrivateTest']

data_train.head()

public_test.head()

private_test.head()

data_train.describe()

k = data_train.iloc[1,1]

len(k.split())

"""# Data Preprocessing
## Transforming csv to understandable image data
"""

from sklearn.utils import shuffle
data_train = shuffle(data_train)
public_test = shuffle(public_test)
private_test = shuffle(private_test)

train = np.array(data_train.iloc[:,1])
validation = np.array(private_test.iloc[:,1])
test = np.array(public_test.iloc[:,1])
print(train.shape, test.shape, validation.shape)

train = train.reshape(28709,1)
test = test.reshape(3589,1)
validation = validation.reshape(3589,1)

def data_augmentation(img):
  img = cv2.flip(img.reshape(48,48), 1)
  return np.array(img.reshape(48,48,1)).astype(np.float32)

# Trying 48,48,3 because of vgg
import cv2
X_train_flip = list()

def reform_data(img_str):
  t1 = img_str[0].split()
  t2 = np.array(t1).astype(np.float32)
  t3 = t2.reshape(48, 48)
  t4 = cv2.cvtColor(t3, cv2.COLOR_GRAY2BGR)
  return t4


def reform_data_aug(img_str):
  t1 = img_str[0].split()
  t2 = np.array(t1).astype(np.float32)
  t3 = t2.reshape(48,48)
  t_1 = data_augmentation(t3)
  t4 = cv2.cvtColor(t3, cv2.COLOR_GRAY2BGR)
  X_train_flip.append(cv2.cvtColor(t_1, cv2.COLOR_GRAY2BGR))
  return t4

X_train_1 = np.apply_along_axis(reform_data_aug, 1, train)
X_train = np.array(list(X_train_1) + X_train_flip)
X_test = np.apply_along_axis(reform_data, 1, test)
X_valid = np.apply_along_axis(reform_data, 1, validation)

print(X_train.shape)
print(X_test.shape)
print(X_valid.shape)

# Sample image
plt.imshow((X_train[0]* 255).astype(np.uint8))

"""### Normalization"""

X_train = X_train/255
X_test = X_test/255
X_valid = X_valid/255

"""### One Hot Encoding"""

Y_train = data_train['emotion']
Y_test = public_test['emotion']
Y_validation = private_test['emotion']

print(Y_train.shape, Y_test.shape, Y_validation.shape)

def onehot(Y, C):
  Y = np.eye(C)[Y].T
  return Y

data['emotion'].unique()

Y_test = onehot(Y_test, 7).T
Y_train = onehot(Y_train, 7).T
Y_valid = onehot(Y_validation, 7).T

Y_train.shape

Y_train = np.array(list(Y_train) + list(Y_train))

Y_train.shape

X_train, Y_train = shuffle(X_train, Y_train, random_state=2)

# Clear memory
del data
del data_train
del public_test
del private_test
del Y_validation
del X_train_1
del X_train_flip
del train
del validation
del test