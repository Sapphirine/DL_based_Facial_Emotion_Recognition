# -*- coding: utf-8 -*-
"""training_VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NaLHkuL5P0obnjLvAmIJbccWmj2ikyNx

"""

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, Conv3D, MaxPooling2D, BatchNormalization, AveragePooling2D
from keras.losses import categorical_crossentropy
from keras.optimizers import Adam, Adamax
from keras.callbacks import ReduceLROnPlateau, TensorBoard, EarlyStopping, ModelCheckpoint
from keras.models import load_model
from keras.regularizers import l2
from keras.layers import Activation, Convolution2D, Dropout
from keras.layers import AveragePooling2D, BatchNormalization
from keras.layers import GlobalAveragePooling2D
from keras.models import Sequential
from keras.layers import Flatten,Dense
from keras.models import Model
from keras.layers import Input
from keras.layers import MaxPooling2D
from keras.layers import SeparableConv2D
from keras import layers
#from keras.regularizers import l2

num_features = 64
num_labels = 7
batch_size = 64
epochs = 100
input_shape = (48, 48, 3)

def Self_Developed_VGG(input_shape):
    model=Sequential()

    #CCP block 1
    model.add(Convolution2D(64, (3, 3), input_shape=input_shape, activation='relu', padding='same'))
    model.add(Convolution2D(64, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    model.add(BatchNormalization())
    model.add(Dropout(.2))

    #CCP block 2
    model.add(Convolution2D(128, (3, 3), activation='relu', padding='same'))
    model.add(Convolution2D(128, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    model.add(BatchNormalization())
    model.add(Dropout(.2))

    #CCP block 3
    model.add(Convolution2D(256, (3, 3), activation='relu', padding='same'))
    model.add(Convolution2D(256, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    model.add(BatchNormalization())
    model.add(Dropout(.2))

    #CCP block 4
    model.add(Convolution2D(512, (3, 3), activation='relu', padding='same'))
    model.add(Convolution2D(512, (3, 3), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
    model.add(BatchNormalization())
    model.add(Dropout(.2))


    # FC layers
    model.add(Flatten())
    #model.add(Activation('softmax',name='predictions'))
    model.add(Dense(4096, activation='relu'))
    #model.add(Dense(4096, activation='relu'))
    model.add(Dense(1000, activation='softmax'))
    return model

def SelfModel():
  vgg = Self_Developed_VGG((48, 48, 3))
  k = Flatten()(vgg.output)
  k = Dense(256, activation='relu')(k)
  k = Dropout(0.2)(k)
  k = Dense(128, activation='relu')(k)
  k = Dropout(0.2)(k)
  k = Dense(64, activation='relu')(k)

  pred = Dense(7, activation='softmax')(k)
  model = Model(input=vgg.input, output=pred)
  return model

smodel5 = SelfModel()

smodel5.summary()

smodel5.compile(loss=categorical_crossentropy,
              optimizer=Adamax(),
              metrics=['accuracy'])

smodel5.fit(X_train,Y_train,
          batch_size=32,
          epochs=500,
          verbose=1,
          validation_data=(X_valid, Y_valid),
          shuffle=True,
          callbacks=[lr_reducer5, tensorboard5, early_stopper5, checkpointer5])

smodel5.evaluate(X_test, Y_test)

smodel5.load_weights('/gdrive/My Drive/big_data_milestone2/model/smodel5-vgg-0.66.h5')

from keras.preprocessing.image import ImageDataGenerator
gen = ImageDataGenerator()
train_generator = gen.flow(X_train, Y_train, batch_size=32)
 
smodel5_n.compile(loss='categorical_crossentropy'
, optimizer=Adamax(lr=0.0005)
, metrics=['accuracy']
)

smodel5_n.load_weights('/gdrive/My Drive/big_data_milestone2/smodel5-vgg-0.66.h5')

smodel5_n.fit_generator(train_generator, steps_per_epoch=50, epochs=100)


